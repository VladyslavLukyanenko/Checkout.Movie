// <auto-generated />
using System;
using Checkout.Movie.Profiles.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Checkout.Movie.Profiles.Infra.Migrations
{
    [DbContext(typeof(ProfilesDbContext))]
    [Migration("20200907170439_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.profile_hi_lo_sequence", "'profile_hi_lo_sequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.profile_sharing_token_hi_lo_sequence", "'profile_sharing_token_hi_lo_sequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.role_hi_lo_sequence", "'role_hi_lo_sequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.user_claim_hi_lo_sequence", "'user_claim_hi_lo_sequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.user_hi_lo_sequence", "'user_hi_lo_sequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "profile_hi_lo_sequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AreAddressesSame")
                        .HasColumnName("are_addresses_same")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_profile");

                    b.HasIndex("UserId")
                        .HasName("ix_profile_user_id");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.ProfileSharingToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "profile_sharing_token_hi_lo_sequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset?>("GrantedAccessAt")
                        .HasColumnName("granted_access_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("RequestedAuthorizationAt")
                        .HasColumnName("requested_authorization_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresAuthorization")
                        .HasColumnName("requires_authorization")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_profile_sharing_token");

                    b.HasIndex("ProfileId")
                        .HasName("ix_profile_sharing_token_profile_id");

                    b.ToTable("profile_sharing_token");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "role_hi_lo_sequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_hi_lo_sequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiscordId")
                        .HasColumnName("discord_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_user_created_by");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.HasIndex("UpdatedBy")
                        .HasName("ix_user_updated_by");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_claim_hi_lo_sequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claim_user_id");

                    b.ToTable("user_claim");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_role_role_id");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.Profile", b =>
                {
                    b.HasOne("Checkout.Movie.Profiles.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Checkout.Movie.Profiles.Core.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<long>("ProfileId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AddressLine1")
                                .HasColumnName("billing_address_address_line1")
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .HasColumnName("billing_address_address_line2")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnName("billing_address_city")
                                .HasColumnType("text");

                            b1.Property<string>("CountryId")
                                .HasColumnName("billing_address_country_id")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .HasColumnName("billing_address_first_name")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnName("billing_address_last_name")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("billing_address_phone_number")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .HasColumnName("billing_address_post_code")
                                .HasColumnType("text");

                            b1.Property<string>("ProvinceCode")
                                .HasColumnName("billing_address_province_code")
                                .HasColumnType("text");

                            b1.HasKey("ProfileId")
                                .HasName("pk_profile");

                            b1.ToTable("profile");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId")
                                .HasConstraintName("fk_profile_profile_id");
                        });

                    b.OwnsOne("Checkout.Movie.Profiles.Core.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<long>("ProfileId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AddressLine1")
                                .HasColumnName("shipping_address_address_line1")
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .HasColumnName("shipping_address_address_line2")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnName("shipping_address_city")
                                .HasColumnType("text");

                            b1.Property<string>("CountryId")
                                .HasColumnName("shipping_address_country_id")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .HasColumnName("shipping_address_first_name")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnName("shipping_address_last_name")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("shipping_address_phone_number")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .HasColumnName("shipping_address_post_code")
                                .HasColumnType("text");

                            b1.Property<string>("ProvinceCode")
                                .HasColumnName("shipping_address_province_code")
                                .HasColumnType("text");

                            b1.HasKey("ProfileId")
                                .HasName("pk_profile");

                            b1.ToTable("profile");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId")
                                .HasConstraintName("fk_profile_profile_id");
                        });

                    b.OwnsOne("Checkout.Movie.Profiles.Core.CreditCard", "CreditCard", b1 =>
                        {
                            b1.Property<long>("ProfileId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CardNumber")
                                .HasColumnName("card_number")
                                .HasColumnType("text");

                            b1.Property<string>("Cvv")
                                .HasColumnName("cvv")
                                .HasColumnType("text");

                            b1.Property<string>("Expiry")
                                .HasColumnName("expiry")
                                .HasColumnType("text");

                            b1.HasKey("ProfileId")
                                .HasName("pk_profile");

                            b1.ToTable("profile");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId")
                                .HasConstraintName("fk_profile_profile_profile_id");
                        });
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.ProfileSharingToken", b =>
                {
                    b.HasOne("Checkout.Movie.Profiles.Core.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_profile_sharing_token_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.User", b =>
                {
                    b.HasOne("Checkout.Movie.Profiles.Core.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_user_created_by");

                    b.HasOne("Checkout.Movie.Profiles.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_user_updated_by");

                    b.OwnsOne("Checkout.Movie.Profiles.Core.Primitives.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnName("is_email_confirmed")
                                .HasColumnType("boolean");

                            b1.Property<string>("NormalizedValue")
                                .HasColumnName("normalized_email")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<string>("Value")
                                .HasColumnName("email")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.HasIndex("NormalizedValue")
                                .HasName("email_index");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_user_id");
                        });
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.UserClaim", b =>
                {
                    b.HasOne("Checkout.Movie.Profiles.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claim_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Movie.Profiles.Core.UserRole", b =>
                {
                    b.HasOne("Checkout.Movie.Profiles.Core.Role", "_role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkout.Movie.Profiles.Core.User", "_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_role_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
